'use strict';
const db = require('../models/index');
require('dotenv').config();
const jwt = require('jsonwebtoken');

module.exports = {
  uniqueMail(user) {
    //メールでユーザーを探す
    return new Promise((resolve, reject) => {
      db.user.findAll({ where: { mail: user } }).then((mail) => {
        resolve(mail);
      });
    });
  },
  postUser(user) {
    //ユーザーを作成
    return new Promise((resolve, reject) => {
      db.user
        .create({
          name: user.name,
          mail: user.mail,
          password: user.password,
          passwordconfirm: user.passwordconfirm,
        })
        .then(() => {
          const token = jwt.sign(
            { name: user.name, mail: user.mail, id: user.id },
            'secret'
          );
          resolve(token);
        });
    });
  },
  createMessage(message) {
    //メッセージを作成
    return new Promise((resolve, reject) => {
      db.Messages.create({
        userId: message.userId,
        title: message.title,
        content: message.content,
      }).then(() => {
        resolve();
      });
    });
  },
  // allMessage() {
  //   //メッセージとユーザーをリレーションしている
  //   return new Promise((resolve, reject) => {
  //     console.log('OK')
  //     console.log(db.Messages)
  //     db.Messages.findAll({
  //       include: [{ model: db.user }],
  //     }).then((message) => {
  //       message.sort((a, b) => {
  //         if (a.id < b.id) return -1;
  //         if (a.id > b.id) return 1;
  //         return 0;
  //       });
  //       resolve(message);
  //     });
  //   });
  // },
  searchMessage(id) {
    //メッセージのアップデートでidからメッセージを検索
    return new Promise((resolve, reject) => {
      db.Messages.findAll({ where: { id: id } }).then((message) => {
        const messages = message[0].dataValues;
        resolve(messages);
      });
    });
  },
  // loginUser(user) {
  //   //ログインしているユーザーを探す
  //   return new Promise((resolve, reject) => {
  //     const mail = jwt.verify(user, 'secret');
  //     db.user.findAll({ where: { mail: mail.mail } }).then((users) => {
  //       const user = users[0].dataValues;
  //       resolve(user);
  //     });
  //   });
  // },
  updateMsg(id, messages) {
    //メッセージをアップデートしている
    return new Promise((resolve, reject) => {
      const message = db.Messages.update(
        { title: messages.title, content: messages.content },
        { where: { id } }
      );
      console.log('OK')
      resolve(message);
    });
  },
  deleteMsg(id) {
    //メッセージ削除
    return new Promise((resolve, reject) => {
      const message = db.Messages.findOne({
        where: { id: id },
      }).then((user) => {
        user.destroy();
      });
      resolve(message);
    });
  },
};
